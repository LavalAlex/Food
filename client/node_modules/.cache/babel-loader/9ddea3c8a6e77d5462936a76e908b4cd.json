{"ast":null,"code":"export function validateRecipe(input) {\n  let errors = {};\n  let flags = true;\n\n  if (!input.diets.length) {\n    errors.diets = \"Seleccione un tipo de dieta\";\n    flags = false;\n  } else if (!input.name && flags) {\n    errors.name = \"Se requiere un Nombre\";\n    flags = false;\n  } else if (!input.summary && flags) {\n    errors.summary = \"Coloque un breve resumen de la receta\";\n    flags = false;\n  } else if (!input.score && flags) {\n    errors.score = \"Falta la puntuacion a la receta, debe ser numerico\";\n    flags = false;\n  } else if (parseInt(input.score) > 100 || parseInt(input.score) < 0 && flags) {\n    errors.score = \"La puntuacion debe estar entre 0 y 100\";\n    flags = false;\n  } else if (!input.health && flags) {\n    errors.health = \"Falta el nivel de salubridad de la dieta, debe ser numerico\";\n    flags = false;\n  } else if (parseInt(input.health) > 100 || parseInt(input.health) < 0 && flags) {\n    errors.health = \"El nivel de salubridad de comida debe estar entre 0 y 100\";\n    flags = false;\n  }\n\n  errors.flags = flags;\n  return errors;\n}\nexport function validateAdds(input) {\n  let errors = {};\n  let flags = true;\n\n  if (input.step.length === 0) {\n    errors.step = \"Debe colocar los pasos de la receta\";\n    flags = false;\n  } else if (input.dishTypes.length === 0) {\n    errors.dishTypes = \"Falta colocar tipo de plato\";\n    flags = false;\n  }\n\n  errors.flags = flags;\n  return errors;\n}\nexport function validateDetailts(input) {\n  let errors = {};\n\n  if (parseInt(input) < 0) {\n    errors.id = \"Debe colocarse numeros positivos\";\n  }\n\n  if (!input) {\n    errors.id = \"Debe colocar un id, el cual debe ser positivo\";\n  }\n\n  return errors;\n}","map":{"version":3,"sources":["/media/Alex/Proyectos/JUNGLE-OF-RECIPES/client/src/support/validate.jsx"],"names":["validateRecipe","input","errors","flags","diets","length","name","summary","score","parseInt","health","validateAdds","step","dishTypes","validateDetailts","id"],"mappings":"AAAA,OAAO,SAASA,cAAT,CAAwBC,KAAxB,EAA8B;AACjC,MAAIC,MAAM,GAAE,EAAZ;AACA,MAAIC,KAAK,GAAG,IAAZ;;AACA,MAAG,CAACF,KAAK,CAACG,KAAN,CAAYC,MAAhB,EAAuB;AACnBH,IAAAA,MAAM,CAACE,KAAP,GAAe,6BAAf;AACAD,IAAAA,KAAK,GAAG,KAAR;AACH,GAHD,MAGM,IAAG,CAACF,KAAK,CAACK,IAAP,IAAeH,KAAlB,EAAwB;AAC1BD,IAAAA,MAAM,CAACI,IAAP,GAAc,uBAAd;AACAH,IAAAA,KAAK,GAAG,KAAR;AACH,GAHK,MAGA,IAAG,CAACF,KAAK,CAACM,OAAP,IAAkBJ,KAArB,EAA2B;AAC7BD,IAAAA,MAAM,CAACK,OAAP,GAAiB,uCAAjB;AACAJ,IAAAA,KAAK,GAAG,KAAR;AACH,GAHK,MAGA,IAAG,CAACF,KAAK,CAACO,KAAP,IAAiBL,KAApB,EAA0B;AAC5BD,IAAAA,MAAM,CAACM,KAAP,GAAe,oDAAf;AACAL,IAAAA,KAAK,GAAG,KAAR;AACH,GAHK,MAGA,IAAGM,QAAQ,CAACR,KAAK,CAACO,KAAP,CAAR,GAAwB,GAAxB,IAA+BC,QAAQ,CAACR,KAAK,CAACO,KAAP,CAAR,GAAuB,CAAvB,IAA6BL,KAA/D,EAAqE;AACvED,IAAAA,MAAM,CAACM,KAAP,GAAe,wCAAf;AACAL,IAAAA,KAAK,GAAG,KAAR;AACH,GAHK,MAGA,IAAG,CAACF,KAAK,CAACS,MAAP,IAAkBP,KAArB,EAA2B;AAC7BD,IAAAA,MAAM,CAACQ,MAAP,GAAgB,6DAAhB;AACAP,IAAAA,KAAK,GAAG,KAAR;AACH,GAHK,MAGA,IAAGM,QAAQ,CAACR,KAAK,CAACS,MAAP,CAAR,GAAwB,GAAxB,IAA+BD,QAAQ,CAACR,KAAK,CAACS,MAAP,CAAR,GAAyB,CAAzB,IAA+BP,KAAjE,EAAuE;AACzED,IAAAA,MAAM,CAACQ,MAAP,GAAgB,2DAAhB;AACAP,IAAAA,KAAK,GAAG,KAAR;AACH;;AACDD,EAAAA,MAAM,CAACC,KAAP,GAAeA,KAAf;AACA,SAAOD,MAAP;AACH;AAED,OAAO,SAASS,YAAT,CAAsBV,KAAtB,EAA4B;AAC/B,MAAIC,MAAM,GAAC,EAAX;AACA,MAAIC,KAAK,GAAG,IAAZ;;AACA,MAAGF,KAAK,CAACW,IAAN,CAAWP,MAAX,KAAsB,CAAzB,EAA2B;AACvBH,IAAAA,MAAM,CAACU,IAAP,GAAc,qCAAd;AACAT,IAAAA,KAAK,GAAG,KAAR;AACH,GAHD,MAGM,IAAGF,KAAK,CAACY,SAAN,CAAgBR,MAAhB,KAA2B,CAA9B,EAAgC;AAClCH,IAAAA,MAAM,CAACW,SAAP,GAAmB,6BAAnB;AACAV,IAAAA,KAAK,GAAG,KAAR;AACH;;AACDD,EAAAA,MAAM,CAACC,KAAP,GAAeA,KAAf;AACA,SAAOD,MAAP;AACH;AAED,OAAO,SAASY,gBAAT,CAA0Bb,KAA1B,EAAgC;AACnC,MAAIC,MAAM,GAAG,EAAb;;AACA,MAAGO,QAAQ,CAACR,KAAD,CAAR,GAAgB,CAAnB,EAAqB;AACjBC,IAAAA,MAAM,CAACa,EAAP,GAAY,kCAAZ;AACH;;AACD,MAAG,CAACd,KAAJ,EAAU;AACNC,IAAAA,MAAM,CAACa,EAAP,GAAY,+CAAZ;AACH;;AACD,SAAOb,MAAP;AACH","sourcesContent":["export function validateRecipe(input){\n    let errors ={};\n    let flags = true\n    if(!input.diets.length){\n        errors.diets = \"Seleccione un tipo de dieta\";\n        flags = false\n    }else if(!input.name && flags){\n        errors.name = \"Se requiere un Nombre\";\n        flags = false\n    }else if(!input.summary && flags){\n        errors.summary = \"Coloque un breve resumen de la receta\"\n        flags = false\n    }else if(!input.score  && flags){\n        errors.score = \"Falta la puntuacion a la receta, debe ser numerico\";\n        flags = false\n    }else if(parseInt(input.score) > 100 || parseInt(input.score)< 0  && flags){\n        errors.score = \"La puntuacion debe estar entre 0 y 100\"\n        flags = false\n    }else if(!input.health  && flags){\n        errors.health = \"Falta el nivel de salubridad de la dieta, debe ser numerico\";\n        flags = false\n    }else if(parseInt(input.health) >100 || parseInt(input.health) < 0  && flags){\n        errors.health = \"El nivel de salubridad de comida debe estar entre 0 y 100\";\n        flags = false\n    }\n    errors.flags = flags\n    return errors\n}\n\nexport function validateAdds(input){\n    let errors={};\n    let flags = true;\n    if(input.step.length === 0){\n        errors.step = \"Debe colocar los pasos de la receta\";\n        flags = false;\n    }else if(input.dishTypes.length === 0){\n        errors.dishTypes = \"Falta colocar tipo de plato\";\n        flags = false;\n    }\n    errors.flags = flags;\n    return errors;\n}   \n\nexport function validateDetailts(input){\n    let errors = {};\n    if(parseInt(input)<0){\n        errors.id = \"Debe colocarse numeros positivos\"\n    }\n    if(!input){\n        errors.id = \"Debe colocar un id, el cual debe ser positivo\"\n    }\n    return errors\n}"]},"metadata":{},"sourceType":"module"}